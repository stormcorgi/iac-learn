version: "3"
services:
  # dragonfly:
  #   image: 'docker.dragonflydb.io/dragonflydb/dragonfly'
  #   ulimits:
  #     memlock: -1
  #   ports:
  #     - "6379:6379"
  #   # For better performance, consider `host` mode instead `port` to avoid docker NAT.
  #   # `host` mode is NOT currently supported in Swarm Mode.
  #   # https://docs.docker.com/compose/compose-file/compose-file-v3/#network_mode
  #   # network_mode: "host"
  #   volumes:
  #     - dragonflydata:/data
  #   deploy:
  #     placement:
  #       constraints:
  #         - node.hostname == spica
  #   logging:
  #     driver: awslogs
  #     options:
  #       awslogs-region: ap-northeast-1
  #       awslogs-group: docker-swarm-log-group
  #       awslogs-stream: dragonflydb

  redis:
    restart: always
    image: redis:7-alpine
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
    # volumes:
    #   - ./redis:/data
    volumes:
      - dragonflydata:/data
    deploy:
      placement:
        constraints:
          - node.hostname == spica
    ports:
      - "6379:6379"
    logging:
      driver: awslogs
      options:
        awslogs-region: ap-northeast-1
        awslogs-group: docker-swarm-log-group
        awslogs-stream: redis


  web:
    image: ghcr.io/mastodon/mastodon:{{mastodon_git.json.tag_name}}
    restart: always
    env_file: .env.production
    command: bash -c "rm -f /mastodon/tmp/pids/server.pid; bundle exec rails s -p 3000"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -q --spider --proxy=off localhost:3000/health || exit 1",
        ]
    ports:
      - "3000:3000"
    deploy:
      resources:
        limits:
          memory: 512m
      placement:
        constraints:
          - node.hostname == altair
    logging:
      driver: awslogs
      options:
        awslogs-region: ap-northeast-1
        awslogs-group: docker-swarm-log-group
        awslogs-stream: mastodon-web

  streaming:
    image: ghcr.io/mastodon/mastodon:{{mastodon_git.json.tag_name}}
    restart: always
    env_file: .env.production
    command: node ./streaming
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -q --spider --proxy=off localhost:4000/api/v1/streaming/health || exit 1",
        ]
    ports:
      - "4000:4000"
    deploy:
      placement:
        constraints:
          - node.hostname == altair
    logging:
      driver: awslogs
      options:
        awslogs-region: ap-northeast-1
        awslogs-group: docker-swarm-log-group
        awslogs-stream: mastodon-streaming

  sidekiq:
    image: ghcr.io/mastodon/mastodon:{{mastodon_git.json.tag_name}}
    restart: always
    env_file: .env.production
    command: bundle exec sidekiq -c 15 -q default -q push -q ingress -q pull
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep '[s]idekiq\ 6' || false"]
    deploy:
      replicas: 6
      placement:
        constraints:
          - node.hostname == vega
    logging:
      driver: awslogs
      options:
        awslogs-region: ap-northeast-1
        awslogs-group: docker-swarm-log-group
        awslogs-stream: mastodon-sidekiq

volumes:
  dragonflydata:
    driver: local